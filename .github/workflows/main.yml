import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog, QVBoxLayout, QPushButton, QMessageBox, QLabel, QLineEdit, QComboBox, QGridLayout, QTableWidget, QTableWidgetItem
from PyQt5.QtCore import Qt
import sqlite3

class DBHelper:
    def __init__(self):
        self.conn = sqlite3.connect("sdms.db")
        self.c = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.c.execute("CREATE TABLE IF NOT EXISTS students (sid INTEGER PRIMARY KEY, Sname TEXT, dept INTEGER, year INTEGER, course_a INTEGER, course_b INTEGER, course_c INTEGER)")

    def add_student(self, sid, Sname, dept, year, course_a, course_b, course_c):
        try:
            self.c.execute("INSERT INTO students (sid, Sname, dept, year, course_a, course_b, course_c) VALUES (?, ?, ?, ?, ?, ?, ?)",
                           (sid, Sname, dept, year, course_a, course_b, course_c))
            self.conn.commit()
            QMessageBox.information(QMessageBox(), 'Successful', 'Student added successfully.')
        except Exception as e:
            QMessageBox.warning(QMessageBox(), 'Error', f'Could not add student to the database: {str(e)}')

    def search_student(self, sid):
        try:
            self.c.execute("SELECT * FROM students WHERE sid = ?", (sid,))
            student_data = self.c.fetchone()
            if student_data:
                return student_data
            else:
                QMessageBox.warning(QMessageBox(), 'Error', f'Could not find any student with roll no {sid}')
                return None
        except Exception as e:
            QMessageBox.warning(QMessageBox(), 'Error', f'Error while searching student: {str(e)}')
            return None

    def delete_student(self, sid):
        try:
            self.c.execute("DELETE FROM students WHERE sid = ?", (sid,))
            self.conn.commit()
            QMessageBox.information(QMessageBox(), 'Successful', 'Student deleted from the database.')
        except Exception as e:
            QMessageBox.warning(QMessageBox(), 'Error', f'Could not delete student from the database: {str(e)}')

class Login(QDialog):
    def __init__(self, parent=None):
        super(Login, self).__init__(parent)
        self.setWindowTitle("Login")
        layout = QGridLayout(self)
        self.userNameLabel = QLabel("Username")
        self.userPassLabel = QLabel("Password")
        self.textName = QLineEdit(self)
        self.textPass = QLineEdit(self)
        self.buttonLogin = QPushButton('Login', self)
        self.buttonLogin.clicked.connect(self.handle_login)
        layout.addWidget(self.userNameLabel, 1, 1)
        layout.addWidget(self.userPassLabel, 2, 1)
        layout.addWidget(self.textName, 1, 2)
        layout.addWidget(self.textPass, 2, 2)
        layout.addWidget(self.buttonLogin, 3, 1, 1, 2)

    def handle_login(self):
        if (self.textName.text() == '' and
            self.textPass.text() == ''):
            self.accept()
        else:
            QMessageBox.warning(self, 'Error', 'Bad user or password')

class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db_helper = DBHelper()
        self.setWindowTitle("Student Database Management System")
        self.setFixedSize(400, 280)
        layout = QVBoxLayout()

        self.btn_enter_student = QPushButton("Enter Student Details", self)
        self.btn_enter_student.clicked.connect(self.enter_student)
        layout.addWidget(self.btn_enter_student)

        self.btn_show_student_details = QPushButton("Show Student Details", self)
        self.btn_show_student_details.clicked.connect(self.show_student_details)
        layout.addWidget(self.btn_show_student_details)

        self.btn_delete_record = QPushButton("Delete Record", self)
        self.btn_delete_record.clicked.connect(self.delete_record)
        layout.addWidget(self.btn_delete_record)

        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

    def enter_student(self):
        enter_student_dialog = AddStudentDialog(self.db_helper)
        enter_student_dialog.exec()

    def show_student_details(self):
        search_dialog = SearchStudentDialog(self.db_helper)
        search_dialog.exec()

    def delete_record(self):
        delete_dialog = DeleteStudentDialog(self.db_helper)
        delete_dialog.exec()

class AddStudentDialog(QDialog):
    def __init__(self, db_helper):
        super().__init__()
        self.db_helper = db_helper
        self.setWindowTitle("Add Student Details")
        layout = QGridLayout(self)

        self.roll_label = QLabel("Roll No")
        self.name_label = QLabel("Name")
        self.branch_label = QLabel("Branch")
        self.year_label = QLabel("Year")
        self.course_a_label = QLabel("Slot A")
        self.course_b_label = QLabel("Slot B")
        self.course_c_label = QLabel("Slot C")

        self.roll_text = QLineEdit(self)
        self.name_text = QLineEdit(self)
        self.branch_combo = QComboBox(self)
        self.branch_combo.addItems(["Mechanical", "Chemical", "Software", "Biotech", "Computer Science", "Information Technology"])
        self.year_combo = QComboBox(self)
        self.year_combo.addItems(["1st", "2nd", "3rd", "4th"])
        self.course_a_combo = QComboBox(self)
        self.course_a_combo.addItems(["DBMS", "OS", "CN", "C++", "JAVA", "PYTHON", "THERMO", "MACHINE", "CELLS", "DS", "CRE", "MICROBES", "FERTILIZER", "PLANTS"])
        self.course_b_combo = QComboBox(self)
        self.course_b_combo.addItems(["DBMS", "OS", "CN", "C++", "JAVA", "PYTHON", "THERMO", "MACHINE", "CELLS", "DS", "CRE", "MICROBES", "FERTILIZER", "PLANTS"])
        self.course_c_combo = QComboBox(self)
        self.course_c_combo.addItems(["DBMS", "OS", "CN", "C++", "JAVA", "PYTHON", "THERMO", "MACHINE", "CELLS", "DS", "CRE", "MICROBES", "FERTILIZER", "PLANTS", "MOBILE APP"])

        layout.addWidget(self.roll_label, 1, 1)
        layout.addWidget(self.name_label, 2, 1)
        layout.addWidget(self.branch_label, 3, 1)
        layout.addWidget(self.year_label, 4, 1)
        layout.addWidget(self.course_a_label, 5, 1)
        layout.addWidget(self.course_b_label, 6, 1)
        layout.addWidget(self.course_c_label, 7, 1)

        layout.addWidget(self.roll_text, 1, 2)
        layout.addWidget(self.name_text, 2, 2)
        layout.addWidget(self.branch_combo, 3, 2)
        layout.addWidget(self.year_combo, 4, 2)
